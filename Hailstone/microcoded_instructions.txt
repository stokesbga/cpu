# Other code which we call

fetch: addrsel=pc irload=1
       pcload=1  pcsel=pc, opcode_jump
#
# ALU operations on Rd,Rs,Rt
#
# add Rd,Rs,Rt (0)
# Rd <- Rs + Rt		PC <- PC + 1
#
0: aluop=add  op2sel=treg  dwrite=1  regsrc=aluout, goto fetch

#
# sub Rd,Rs,Rt (1)
# Rd <- Rs - Rt		PC <- PC + 1
#
1: aluop=sub  op2sel=treg  dwrite=1  regsrc=aluout, goto fetch

#
# mul Rd,Rs,Rt (2)
# Rd <- Rs * Rt		PC <- PC + 1
2: aluop=mul  op2sel=treg  dwrite=1  regsrc=aluout, goto fetch

#
# div Rd,Rs,Rt (3)
# Rd <- Rs / Rt		PC <- PC + 1
3: aluop=div  op2sel=treg  dwrite=1  regsrc=aluout, goto fetch

#
# rem Rd,Rs,Rt (4)
# Rd <- Rs % Rt		PC <- PC + 1
4: aluop=rem  op2sel=treg  dwrite=1  regsrc=aluout, goto fetch

#
# and Rd,Rs,Rt (5)
# Rd <- Rs AND Rt		PC <- PC + 1
5: aluop=and  op2sel=treg  dwrite=1  regsrc=aluout, goto fetch

#
# or Rd,Rs,Rt (6)
# Rd <- Rs OR Rt		PC <- PC + 1
6: aluop=or  op2sel=treg  dwrite=1  regsrc=aluout, goto fetch

#
# xor Rd,Rs,Rt (7)
# Rd <- Rs XOR Rt		PC <- PC + 1
7: aluop=xor  op2sel=treg  dwrite=1  regsrc=aluout, goto fetch

#
# nand Rd,Rs,Rt (8)
# Rd <- Rs NAND Rt	PC <- PC + 1
8: aluop=nand  op2sel=treg  dwrite=1  regsrc=aluout, goto fetch

#
# nor Rd,Rs,Rt (9)
# Rd <- Rs NOR Rt		PC <- PC + 1
9: aluop=nor  op2sel=treg  dwrite=1  regsrc=aluout, goto fetch

#
# not Rd,Rs (10)
# Rd <- NOT Rs		PC <- PC + 1
10: aluop=not  op2sel=treg  dwrite=1  regsrc=aluout, goto fetch

#
# lsl Rd,Rs,Rt (11)
# Rd <- Rs << Rt		PC <- PC + 1
11: aluop=lsl  op2sel=treg  dwrite=1  regsrc=aluout, goto fetch

#
# lsr Rd,Rs,Rt (12)
# Rd <- Rs >> Rt		PC <- PC + 1
12: aluop=lsr  op2sel=treg  dwrite=1  regsrc=aluout, goto fetch

#
# asr Rd,Rs,Rt (13)
# Rd <- Rs >> Rt (filled bits are the sign bit)	PC <- PC + 1
13: aluop=asr  op2sel=treg  dwrite=1  regsrc=aluout, goto fetch

#
# rol Rd,Rs,Rt (14)
# Rd <- Rs rolled left by Rt bits	PC <- PC + 1
14: aluop=rol  op2sel=treg  dwrite=1  regsrc=aluout, goto fetch

#
# ror Rd,Rs,Rt (15)
# Rd <- Rs rolled right by Rt bits	PC <- PC + 1
15: aluop=ror  op2sel=treg  dwrite=1  regsrc=aluout, goto fetch

#
# addi Rd,Rs,immed (16)
# Rd <- Rs + immed	PC <- PC + 2
16: addrsel=pc  imload=1
    aluop=add  op2sel=immed  dwrite=1  regsrc=aluout, goto fetch

#
# subi Rd,Rs,immed (17)
# Rd <- Rs - immed	PC <- PC + 2
17: addrsel=pc  imload=1
    aluop=sub  op2sel=immed  dwrite=1  regsrc=aluout, goto fetch

#
# muli Rd,Rs,immed (18)
# Rd <- Rs * immed	PC <- PC + 2
18: addrsel=pc  imload=1
    aluop=mul  op2sel=immed  dwrite=1  regsrc=aluout, goto fetch

#
# divi Rd,Rs,immed (19)
# Rd <- Rs / immed	PC <- PC + 2
19: addrsel=pc  imload=1
    aluop=div  op2sel=immed  dwrite=1  regsrc=aluout, goto fetch

#
# remi Rd,Rs,immed (20)
# Rd <- Rs % immed	PC <- PC + 2
20: addrsel=pc  imload=1
    aluop=rem  op2sel=immed  dwrite=1  regsrc=aluout, goto fetch

#
# andi Rd,Rs,immed (21)
# Rd <- Rs AND immed	PC <- PC + 2
21: addrsel=pc  imload=1
    aluop=and  op2sel=immed  dwrite=1  regsrc=aluout, goto fetch

#
# ori Rd,Rs,immed (22)
# Rd <- Rs OR immed	PC <- PC + 2
22: addrsel=pc  imload=1
    aluop=or  op2sel=immed  dwrite=1  regsrc=aluout, goto fetch

#
# xori Rd,Rs,immed (23)
# Rd <- Rs XOR immed	PC <- PC + 2
23: addrsel=pc  imload=1
    aluop=xor  op2sel=immed  dwrite=1  regsrc=aluout, goto fetch

#
# nandi Rd,Rs,immed (24)
# Rd <- Rs NAND immed	PC <- PC + 2
24: addrsel=pc  imload=1
    aluop=nand  op2sel=immed  dwrite=1  regsrc=aluout, goto fetch

#
# nori Rd,Rs,immed (25)
# Rd <- Rs NOR immed	PC <- PC + 2
25: addrsel=pc  imload=1
    aluop=nor  op2sel=immed  dwrite=1  regsrc=aluout, goto fetch

#
# lsli Rd,Rs,immed (26)
# Rd <- Rs << immed	PC <- PC + 2
26: addrsel=pc  imload=1
    aluop=lsl  op2sel=immed  dwrite=1  regsrc=aluout, goto fetch

#
# lsri Rd,Rs,immed (27)
# Rd <- Rs >> immed	PC <- PC + 2
27: addrsel=pc  imload=1
    aluop=lsr  op2sel=immed  dwrite=1  regsrc=aluout, goto fetch

#
# asri Rd,Rs,immed (28)
# Rd <- Rs >> immed (filled bits are the sign bit)	PC <- PC + 2
28: addrsel=pc  imload=1
    aluop=asr  op2sel=immed  dwrite=1  regsrc=aluout, goto fetch

#
# roli Rd,Rs,immed (29)
# Rd <- Rs rolled left by immed bits	PC <- PC + 2
29: addrsel=pc  imload=1
    aluop=rol  op2sel=immed  dwrite=1  regsrc=aluout, goto fetch

#
# rori Rd,Rs,immed (30)
# Rd <- Rs rolled right by immed bits	PC <- PC + 2
30: addrsel=pc  imload=1
    aluop=ror  op2sel=immed  dwrite=1  regsrc=aluout, goto fetch

#
# addc Rd,Rs,Rt,immed (31)
# Rd <- Rs + Rt
# if carry set, PC <- immed else  PC <- PC + 2
31: addrsel=pc  imload=1
    aluop=add  op2sel=treg  dwrite=1  regsrc=aluout, goto fetch
#
# subc Rd,Rs,Rt,immed (32)
# Rd <- Rs - Rt
# if carry set, PC <- immed else  PC <- PC + 2
32: addrsel=pc  imload=1
    aluop=sub  op2sel=treg  dwrite=1  regsrc=aluout, goto fetch

#
# jeq Rs,Rt,immed (33)
# if Rs == Rt, PC <- immed else  PC <- PC + 2
33: addrsel=pc  imload=1
    aluop=sub  op2sel=treg, if z then jump else pcincr 

#
# jne Rs,Rt,immed (34)
# if Rs != Rt, PC <- immed else  PC <- PC + 2
34: addrsel=pc  imload=1
    aluop=sub  op2sel=treg, if z then pcincr else jump

#
# jgt Rs,Rt,immed (35)
# if Rs > Rt, PC <- immed else  PC <- PC + 2
35: addrsel=pc  imload=1
    aluop=sub  op2sel=treg, if norz then pcincr else jump

#
# jle Rs,Rt,immed (36)
# if Rs <= Rt, PC <- immed else  PC <- PC + 2
36: addrsel=pc  imload=1
    aluop=sub  op2sel=treg, if norz then jump else pcincr 

#
# jlt Rs,Rt,immed (37)
# if Rs < Rt, PC <- immed else  PC <- PC + 2
37: addrsel=pc  imload=1
    aluop=sub  op2sel=treg, if n then jump else pcincr 

#
# jge Rs,Rt,immed (38)
# if Rs >= Rt, PC <- immed else  PC <- PC + 2
38: addrsel=pc  imload=1
    aluop=sub  op2sel=treg, if n then pcincr else jump

#
# jeqz Rs,immed (39)
# if Rs == 0, PC <- immed else  PC <- PC + 2
39: addrsel=pc  imload=1
    aluop=sub  op2sel=0, if z then jump else pcincr 

#
# jnez Rs,immed (40)
# if Rs != 0, PC <- immed else  PC <- PC + 2
40: addrsel=pc  imload=1
    aluop=sub  op2sel=0, if z then pcincr else jump

#
# jgtz Rs,immed (41)
# if Rs > 0, PC <- immed else  PC <- PC + 2
41: addrsel=pc  imload=1
    aluop=sub  op2sel=0, if norz then pcincr else jump

#
# jlez Rs,immed (42)
# if Rs <= 0, PC <- immed else  PC <- PC + 2
42: addrsel=pc  imload=1
    aluop=sub  op2sel=0, if norz then jump else pcincr 

#
# jltz Rs,immed (43)
# if Rs < 0, PC <- immed else  PC <- PC + 2
43: addrsel=pc  imload=1
    aluop=sub  op2sel=0, if n then jump else pcincr 

#
# jgez Rs,immed (44)
# if Rs >= 0, PC <- immed else  PC <- PC + 2
44: addrsel=pc  imload=1
    aluop=sub  op2sel=0, if n then pcincr else jump

#
# jmp immed (45)
# PC <- immed
45: addrsel=pc  imload=1, goto jump

#
# beq Rs,Rt,immed (46)
# if Rs == Rt, PC <- PC + immed else  PC <- PC + 2
46: addrsel=pc  imload=1
    aluop=sub  op2sel=treg, if z then pcoffs else pcincr 

#
# bne Rs,Rt,immed (47)
# if Rs != Rt, PC <- PC + immed else  PC <- PC + 2
47: addrsel=pc  imload=1
    aluop=sub  op2sel=treg, if z then pcincr else pcoffs

#
# bgt Rs,Rt,immed (48)
# if Rs > Rt, PC <- PC + immed else  PC <- PC + 2
48: addrsel=pc  imload=1
    aluop=sub  op2sel=treg, if norz then pcincr else pcoffs

#
# ble Rs,Rt,immed (49)
# if Rs <= Rt, PC <- PC + immed else  PC <- PC + 2
49: addrsel=pc  imload=1
    aluop=sub  op2sel=treg, if norz then pcoffs else pcincr 

#
# blt Rs,Rt,immed (50)
# if Rs < Rt, PC <- PC + immed else  PC <- PC + 2
50: addrsel=pc  imload=1
    aluop=sub  op2sel=treg, if n then pcoffs else pcincr 

#
# bge Rs,Rt,immed (51)
# if Rs >= Rt, PC <- PC + immed else  PC <- PC + 2
51: addrsel=pc  imload=1
    aluop=sub  op2sel=treg, if n then pcincr else pcoffs

#
# beqz Rs,immed (52)
# if Rs == 0, PC <- PC + immed else  PC <- PC + 2
52: addrsel=pc  imload=1
    aluop=sub  op2sel=0, if z then pcoffs else pcincr 

#
# bnez Rs,immed (53)
# if Rs != 0, PC <- PC + immed else  PC <- PC + 2
53: addrsel=pc  imload=1
    aluop=sub  op2sel=0, if z then pcincr else pcoffs

#
# bgtz Rs,immed (54)
# if Rs > 0, PC <- PC + immed else  PC <- PC + 2
54: addrsel=pc  imload=1
    aluop=sub  op2sel=0, if norz then pcincr else pcoffs

#
# blez Rs,immed (55)
# if Rs <= 0, PC <- PC + immed else  PC <- PC + 2
55: addrsel=pc  imload=1
    aluop=sub  op2sel=0, if norz then pcoffs else pcincr 

#
# bltz Rs,immed (56)
# if Rs < 0, PC <- PC + immed else  PC <- PC + 2
56: addrsel=pc  imload=1
    aluop=sub  op2sel=0, if n then pcoffs else pcincr 

#
# bgez Rs,immed (57)
# if Rs >= 0, PC <- PC + immed else  PC <- PC + 2
57: addrsel=pc  imload=1
    aluop=sub  op2sel=0, if n then pcincr else pcoffs

#
# br immed (58)
# PC <- PC + immed
58: addrsel=pc  imload=1, goto pcoffs

#
# inc Rs (61)
# Rs <- Rs + 1		PC <- PC + 1
61: aluop=add  op2sel=1  swrite=1  regsrc=aluout, goto fetch

#
# dec Rs (62)
# Rs <- Rs - 1		PC <- PC + 1
62: aluop=sub  op2sel=1  swrite=1  regsrc=aluout, goto fetch

#
# li Rd,immed (63)
# Rd <- immed		PC <- PC + 2
63: addrsel=pc  dwrite=1  regsrc=databus
    pcload=1  pcsel=pc, goto fetch

#
# lw Rd,immed (64)
# Rd <- M[immed]		PC <- PC + 2
#64:	

#
# sw Rd,immed (65)
# M[immed] <- Rd		PC <- PC + 2
65: addrsel=pc  imload=1
    addrsel=immed  datawrite=1  datasel=dreg
    pcload=1  pcsel=pc, goto fetch

# Other code which we call
# 
pcincr:	pcload=1  pcsel=pc, goto fetch
jump:		pcload=1  pcsel=immed, goto fetch
pcoffs:	pcload=1  pcsel=pcimmed, goto fetch

